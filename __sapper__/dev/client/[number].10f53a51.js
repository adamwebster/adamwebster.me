import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, E as validate_each_argument, v as validate_slots, e as element, t as text, a as space, c as claim_element, b as children, f as claim_text, g as detach_dev, h as claim_space, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, o as set_data_dev, J as empty, y as query_selector_all, n as noop, G as destroy_each } from './client.51d7c3b3.js';
import { B as BlogSettings } from './SiteSettings.e9575efe.js';

/* src/routes/blog/page/[number].svelte generated by Svelte v3.23.0 */
const file = "src/routes/blog/page/[number].svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (33:2) {#each posts as post}
function create_each_block(ctx) {
	let li;
	let a;
	let t0_value = /*post*/ ctx[3].title + "";
	let t0;
	let a_href_value;
	let t1;

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { rel: true, href: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, t0_value);
			a_nodes.forEach(detach_dev);
			t1 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "rel", "prefetch");
			attr_dev(a, "href", a_href_value = "blog/" + /*post*/ ctx[3].category + "/" + /*post*/ ctx[3].slug);
			add_location(a, file, 39, 6, 1087);
			add_location(li, file, 38, 4, 1076);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, a);
			append_dev(a, t0);
			append_dev(li, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*posts*/ 1 && t0_value !== (t0_value = /*post*/ ctx[3].title + "")) set_data_dev(t0, t0_value);

			if (dirty & /*posts*/ 1 && a_href_value !== (a_href_value = "blog/" + /*post*/ ctx[3].category + "/" + /*post*/ ctx[3].slug)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(33:2) {#each posts as post}",
		ctx
	});

	return block;
}

// (44:0) {#if pageNumber > 1}
function create_if_block_1(ctx) {
	let a;
	let t;
	let a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			t = text("Previous Page");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, "Previous Page");
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", a_href_value = "/blog/page/" + (/*pageNumber*/ ctx[1] - 1));
			add_location(a, file, 44, 0, 1209);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*pageNumber*/ 2 && a_href_value !== (a_href_value = "/blog/page/" + (/*pageNumber*/ ctx[1] - 1))) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(44:0) {#if pageNumber > 1}",
		ctx
	});

	return block;
}

// (47:0) {#if !isLastPage}
function create_if_block(ctx) {
	let a;
	let t;
	let a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			t = text("Next Page");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, "Next Page");
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", a_href_value = "/blog/page/" + (/*pageNumber*/ ctx[1] + 1));
			add_location(a, file, 47, 0, 1289);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*pageNumber*/ 2 && a_href_value !== (a_href_value = "/blog/page/" + (/*pageNumber*/ ctx[1] + 1))) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(47:0) {#if !isLastPage}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let t3;
	let ul;
	let t4;
	let t5;
	let if_block1_anchor;
	let each_value = /*posts*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	let if_block0 = /*pageNumber*/ ctx[1] > 1 && create_if_block_1(ctx);
	let if_block1 = !/*isLastPage*/ ctx[2] && create_if_block(ctx);

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Page ");
			t2 = text(/*pageNumber*/ ctx[1]);
			t3 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			if (if_block0) if_block0.c();
			t5 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-10h7psl\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Page ");
			t2 = claim_text(h1_nodes, /*pageNumber*/ ctx[1]);
			h1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			if (if_block0) if_block0.l(nodes);
			t5 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			if_block1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			document.title = "Blog";
			add_location(h1, file, 30, 0, 797);
			attr_dev(ul, "class", "svelte-1uzksw3");
			add_location(ul, file, 31, 0, 824);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			append_dev(h1, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			insert_dev(target, t4, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t5, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*pageNumber*/ 2) set_data_dev(t2, /*pageNumber*/ ctx[1]);

			if (dirty & /*posts*/ 1) {
				each_value = /*posts*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (/*pageNumber*/ ctx[1] > 1) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(t5.parentNode, t5);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!/*isLastPage*/ ctx[2]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t4);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t5);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(if_block1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function preload({ params, query }) {
	return this.fetch(`../blog.json`).then(r => r.json()).then(posts => {
		const isLastPage = posts.length <= BlogSettings.postsPerPage * params.number;
		const pagedPosts = posts.slice(BlogSettings.postsPerPage * (params.number - 1), BlogSettings.postsPerPage * (params.number - 1) + BlogSettings.postsPerPage);

		return {
			isLastPage,
			posts: pagedPosts,
			pageNumber: parseInt(params.number)
		};
	});
}

function instance($$self, $$props, $$invalidate) {
	let { posts } = $$props;
	let { pageNumber } = $$props;
	let { isLastPage } = $$props;
	const writable_props = ["posts", "pageNumber", "isLastPage"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bnumberu5D> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("U5Bnumberu5D", $$slots, []);

	$$self.$set = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
		if ("pageNumber" in $$props) $$invalidate(1, pageNumber = $$props.pageNumber);
		if ("isLastPage" in $$props) $$invalidate(2, isLastPage = $$props.isLastPage);
	};

	$$self.$capture_state = () => ({
		BlogSettings,
		preload,
		posts,
		pageNumber,
		isLastPage
	});

	$$self.$inject_state = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
		if ("pageNumber" in $$props) $$invalidate(1, pageNumber = $$props.pageNumber);
		if ("isLastPage" in $$props) $$invalidate(2, isLastPage = $$props.isLastPage);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [posts, pageNumber, isLastPage];
}

class U5Bnumberu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { posts: 0, pageNumber: 1, isLastPage: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bnumberu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*posts*/ ctx[0] === undefined && !("posts" in props)) {
			console.warn("<U5Bnumberu5D> was created without expected prop 'posts'");
		}

		if (/*pageNumber*/ ctx[1] === undefined && !("pageNumber" in props)) {
			console.warn("<U5Bnumberu5D> was created without expected prop 'pageNumber'");
		}

		if (/*isLastPage*/ ctx[2] === undefined && !("isLastPage" in props)) {
			console.warn("<U5Bnumberu5D> was created without expected prop 'isLastPage'");
		}
	}

	get posts() {
		throw new Error("<U5Bnumberu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set posts(value) {
		throw new Error("<U5Bnumberu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get pageNumber() {
		throw new Error("<U5Bnumberu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set pageNumber(value) {
		throw new Error("<U5Bnumberu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isLastPage() {
		throw new Error("<U5Bnumberu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isLastPage(value) {
		throw new Error("<U5Bnumberu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bnumberu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW251bWJlcl0uMTBmNTNhNTEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvYmxvZy9wYWdlL1tudW1iZXJdLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cbmltcG9ydCB7QmxvZ1NldHRpbmdzfSBmcm9tICcuLi8uLi8uLi9TaXRlU2V0dGluZ3MuanMnO1xuICBleHBvcnQgZnVuY3Rpb24gcHJlbG9hZCh7IHBhcmFtcywgcXVlcnkgfSkge1xuICAgIHJldHVybiB0aGlzLmZldGNoKGAuLi9ibG9nLmpzb25gKVxuICAgICAgLnRoZW4ociA9PiByLmpzb24oKSlcbiAgICAgIC50aGVuKHBvc3RzID0+IHtcbiAgICAgICAgY29uc3QgaXNMYXN0UGFnZSA9IHBvc3RzLmxlbmd0aCA8PSBCbG9nU2V0dGluZ3MucG9zdHNQZXJQYWdlICogcGFyYW1zLm51bWJlcjtcbiAgICAgICAgY29uc3QgcGFnZWRQb3N0cyAgPSBwb3N0cy5zbGljZShCbG9nU2V0dGluZ3MucG9zdHNQZXJQYWdlICogKHBhcmFtcy5udW1iZXIgLSAxKSwgQmxvZ1NldHRpbmdzLnBvc3RzUGVyUGFnZSAqIChwYXJhbXMubnVtYmVyIC0gMSkgKyBCbG9nU2V0dGluZ3MucG9zdHNQZXJQYWdlKTtcbiAgICAgICAgcmV0dXJuIHsgaXNMYXN0UGFnZSwgcG9zdHM6IHBhZ2VkUG9zdHMsIHBhZ2VOdW1iZXI6IHBhcnNlSW50KHBhcmFtcy5udW1iZXIpIH07XG4gICAgICB9KTtcbiAgfVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG4gIGV4cG9ydCBsZXQgcG9zdHM7XG4gIGV4cG9ydCBsZXQgcGFnZU51bWJlcjtcbiAgZXhwb3J0IGxldCBpc0xhc3RQYWdlO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgdWwge1xuICAgIG1hcmdpbjogMCAwIDFlbSAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjU7XG4gIH1cbjwvc3R5bGU+XG5cbjxzdmVsdGU6aGVhZD5cbiAgPHRpdGxlPkJsb2c8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPGgxPlBhZ2Uge3BhZ2VOdW1iZXJ9PC9oMT5cbjx1bD5cbiAgeyNlYWNoIHBvc3RzIGFzIHBvc3R9XG4gICAgPCEtLSB3ZSdyZSB1c2luZyB0aGUgbm9uLXN0YW5kYXJkIGByZWw9cHJlZmV0Y2hgIGF0dHJpYnV0ZSB0b1xuXHRcdFx0XHR0ZWxsIFNhcHBlciB0byBsb2FkIHRoZSBkYXRhIGZvciB0aGUgcGFnZSBhcyBzb29uIGFzXG5cdFx0XHRcdHRoZSB1c2VyIGhvdmVycyBvdmVyIHRoZSBsaW5rIG9yIHRhcHMgaXQsIGluc3RlYWQgb2Zcblx0XHRcdFx0d2FpdGluZyBmb3IgdGhlICdjbGljaycgZXZlbnQgLS0+XG5cbiAgICA8bGk+XG4gICAgICA8YSByZWw9XCJwcmVmZXRjaFwiIGhyZWY9XCJibG9nL3twb3N0LmNhdGVnb3J5fS97cG9zdC5zbHVnfVwiPntwb3N0LnRpdGxlfTwvYT5cbiAgICA8L2xpPlxuICB7L2VhY2h9XG48L3VsPlxueyNpZiBwYWdlTnVtYmVyID4gMX1cbjxhIGhyZWY9XCIvYmxvZy9wYWdlL3twYWdlTnVtYmVyIC0gMX1cIj5QcmV2aW91cyBQYWdlPC9hPlxuey9pZn1cbnsjaWYgIWlzTGFzdFBhZ2V9XG48YSBocmVmPVwiL2Jsb2cvcGFnZS97cGFnZU51bWJlciArIDF9XCI+TmV4dCBQYWdlPC9hPlxuey9pZn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O3lCQXVDaUUsR0FBSSxJQUFDLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lEQUF2QyxHQUFJLElBQUMsUUFBUSxrQkFBRyxHQUFJLElBQUMsSUFBSTs7Ozs7Ozs7Ozs7Z0VBQUksR0FBSSxJQUFDLEtBQUs7O2tGQUF2QyxHQUFJLElBQUMsUUFBUSxrQkFBRyxHQUFJLElBQUMsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztzRUFLeEMsR0FBVSxNQUFHLENBQUM7Ozs7Ozs7O29HQUFkLEdBQVUsTUFBRyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3NFQUdkLEdBQVUsTUFBRyxDQUFDOzs7Ozs7OztvR0FBZCxHQUFVLE1BQUcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQWYxQixHQUFLOzs7O2dDQUFWLE1BQUk7Ozs7Z0NBV0gsR0FBVSxNQUFHLENBQUM7aUNBR2IsR0FBVTs7Ozs7Ozs0QkFoQk4sR0FBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0Q0FBVixHQUFVOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lFQUFWLEdBQVU7OzsyQkFFWCxHQUFLOzs7OytCQUFWLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBQUosTUFBSTs7O3NCQVdILEdBQVUsTUFBRyxDQUFDOzs7Ozs7Ozs7Ozs7O3VCQUdiLEdBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7U0E1Q0UsT0FBTyxHQUFHLE1BQU0sRUFBRSxLQUFLO1FBQzlCLElBQUksQ0FBQyxLQUFLLGlCQUNkLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksSUFDaEIsSUFBSSxDQUFDLEtBQUs7UUFDSCxVQUFVLEdBQUcsS0FBSyxDQUFDLE1BQU0sSUFBSSxZQUFZLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxNQUFNO1FBQ3RFLFVBQVUsR0FBSSxLQUFLLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxZQUFZLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsWUFBWSxDQUFDLFlBQVksSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxZQUFZLENBQUMsWUFBWTs7O0dBQ25KLFVBQVU7R0FBRSxLQUFLLEVBQUUsVUFBVTtHQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU07Ozs7OztPQU1yRSxLQUFLO09BQ0wsVUFBVTtPQUNWLFVBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
