import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, E as validate_each_argument, v as validate_slots, e as element, a as space, t as text, c as claim_element, b as children, h as claim_space, f as claim_text, g as detach_dev, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, o as set_data_dev, p as create_component, q as claim_component, r as mount_component, u as transition_in, w as transition_out, x as destroy_component, y as query_selector_all, F as check_outros, G as destroy_each, H as group_outros } from './client.39cdc933.js';
import { B as Button } from './Button.96bc7782.js';
import { C as CategoryList } from './CategoryList.2f349fb7.js';
import { P as PortfolioSettings } from './SiteSettings.e9575efe.js';

/* src/routes/portfolio/index.svelte generated by Svelte v3.23.0 */
const file = "src/routes/portfolio/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (89:10) {#if post.featuredImage}
function create_if_block_1(ctx) {
	let div;
	let a;
	let img;
	let img_alt_value;
	let img_src_value;
	let a_href_value;

	const block = {
		c: function create() {
			div = element("div");
			a = element("a");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			a = claim_element(div_nodes, "A", { rel: true, href: true });
			var a_nodes = children(a);
			img = claim_element(a_nodes, "IMG", { alt: true, src: true, class: true });
			a_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "alt", img_alt_value = "" + (/*post*/ ctx[3].title + " featured image"));
			if (img.src !== (img_src_value = /*post*/ ctx[3].featuredImage)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "svelte-398vlu");
			add_location(img, file, 92, 16, 2243);
			attr_dev(a, "rel", "prefetch");
			attr_dev(a, "href", a_href_value = "portfolio/" + /*post*/ ctx[3].category + "/" + /*post*/ ctx[3].slug);
			add_location(a, file, 90, 14, 2162);
			attr_dev(div, "class", "awm-portfolio-featured-image-wrappper svelte-398vlu");
			add_location(div, file, 89, 12, 2096);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, a);
			append_dev(a, img);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*posts*/ 1 && img_alt_value !== (img_alt_value = "" + (/*post*/ ctx[3].title + " featured image"))) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*posts*/ 1 && img.src !== (img_src_value = /*post*/ ctx[3].featuredImage)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*posts*/ 1 && a_href_value !== (a_href_value = "portfolio/" + /*post*/ ctx[3].category + "/" + /*post*/ ctx[3].slug)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(89:10) {#if post.featuredImage}",
		ctx
	});

	return block;
}

// (83:6) {#each posts as post}
function create_each_block(ctx) {
	let div;
	let t0;
	let span;
	let t1_value = /*post*/ ctx[3].title + "";
	let t1;
	let t2;
	let if_block = /*post*/ ctx[3].featuredImage && create_if_block_1(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			t0 = space();
			span = element("span");
			t1 = text(t1_value);
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t0 = claim_space(div_nodes);
			span = claim_element(div_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, t1_value);
			span_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "awm-portfolio-item-title svelte-398vlu");
			add_location(span, file, 99, 10, 2411);
			add_location(div, file, 87, 8, 2043);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_dev(div, t0);
			append_dev(div, span);
			append_dev(span, t1);
			append_dev(div, t2);
		},
		p: function update(ctx, dirty) {
			if (/*post*/ ctx[3].featuredImage) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(div, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*posts*/ 1 && t1_value !== (t1_value = /*post*/ ctx[3].title + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(83:6) {#each posts as post}",
		ctx
	});

	return block;
}

// (108:2) {#if !isLastPage}
function create_if_block(ctx) {
	let current;

	const button = new Button({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[2]);

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(button.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 64) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(108:2) {#if !isLastPage}",
		ctx
	});

	return block;
}

// (109:4) <Button on:click={() => (window.location.href = '/portfolio/page/2')}>
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Next Page");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Next Page");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(109:4) <Button on:click={() => (window.location.href = '/portfolio/page/2')}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let t1;
	let section;
	let h1;
	let t2;
	let t3;
	let div1;
	let t4;
	let div0;
	let t5;
	let div2;
	let current;

	const categorylist = new CategoryList({
			props: { categories: PortfolioSettings.categories },
			$$inline: true
		});

	let each_value = /*posts*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	let if_block = !/*isLastPage*/ ctx[1] && create_if_block(ctx);

	const block = {
		c: function create() {
			t0 = text(",\n");
			t1 = space();
			section = element("section");
			h1 = element("h1");
			t2 = text("Portfolio");
			t3 = space();
			div1 = element("div");
			create_component(categorylist.$$.fragment);
			t4 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t5 = space();
			div2 = element("div");
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, ",\n");
			const head_nodes = query_selector_all("[data-svelte=\"svelte-nhhy6p\"]", document.head);
			head_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { id: true, class: true });
			var section_nodes = children(section);
			h1 = claim_element(section_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t2 = claim_text(h1_nodes, "Portfolio");
			h1_nodes.forEach(detach_dev);
			t3 = claim_space(section_nodes);
			div1 = claim_element(section_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(categorylist.$$.fragment, div1_nodes);
			t4 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			if (if_block) if_block.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Portfolio";
			attr_dev(h1, "class", "svelte-398vlu");
			add_location(h1, file, 78, 2, 1628);
			attr_dev(div0, "class", "awm-portfolio-grid svelte-398vlu");
			add_location(div0, file, 81, 4, 1752);
			attr_dev(div1, "class", "awm-portfolio-wrapper svelte-398vlu");
			add_location(div1, file, 79, 2, 1649);
			attr_dev(section, "id", "awm-portfolio");
			attr_dev(section, "class", "svelte-398vlu");
			add_location(section, file, 77, 0, 1597);
			attr_dev(div2, "class", "awm-portfolio-paging svelte-398vlu");
			add_location(div2, file, 106, 0, 2531);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, h1);
			append_dev(h1, t2);
			append_dev(section, t3);
			append_dev(section, div1);
			mount_component(categorylist, div1, null);
			append_dev(div1, t4);
			append_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			insert_dev(target, t5, anchor);
			insert_dev(target, div2, anchor);
			if (if_block) if_block.m(div2, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*posts*/ 1) {
				each_value = /*posts*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (!/*isLastPage*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*isLastPage*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div2, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(categorylist.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(categorylist.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(section);
			destroy_component(categorylist);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(div2);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function preload({ params, query }) {
	return this.fetch(`portfolio.json`).then(r => r.json()).then(posts => {
		const isLastPage = posts.length <= PortfolioSettings.postsPerPage * 1;
		const pagedPosts = posts.slice(0, PortfolioSettings.postsPerPage);
		return { isLastPage, posts: pagedPosts };
	});
}

function instance($$self, $$props, $$invalidate) {
	let { posts } = $$props;
	let { isLastPage } = $$props;
	const writable_props = ["posts", "isLastPage"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Portfolio> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Portfolio", $$slots, []);
	const click_handler = () => window.location.href = "/portfolio/page/2";

	$$self.$set = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
		if ("isLastPage" in $$props) $$invalidate(1, isLastPage = $$props.isLastPage);
	};

	$$self.$capture_state = () => ({
		PortfolioSettings,
		Button,
		CategoryList,
		preload,
		posts,
		isLastPage
	});

	$$self.$inject_state = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
		if ("isLastPage" in $$props) $$invalidate(1, isLastPage = $$props.isLastPage);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [posts, isLastPage, click_handler];
}

class Portfolio extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { posts: 0, isLastPage: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Portfolio",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*posts*/ ctx[0] === undefined && !("posts" in props)) {
			console.warn("<Portfolio> was created without expected prop 'posts'");
		}

		if (/*isLastPage*/ ctx[1] === undefined && !("isLastPage" in props)) {
			console.warn("<Portfolio> was created without expected prop 'isLastPage'");
		}
	}

	get posts() {
		throw new Error("<Portfolio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set posts(value) {
		throw new Error("<Portfolio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isLastPage() {
		throw new Error("<Portfolio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isLastPage(value) {
		throw new Error("<Portfolio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Portfolio;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNGJiYzRjOWQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvcG9ydGZvbGlvL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cbiAgaW1wb3J0IHsgUG9ydGZvbGlvU2V0dGluZ3MgfSBmcm9tIFwiLi4vLi4vU2l0ZVNldHRpbmdzLmpzXCI7XG4gIGltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvQnV0dG9uL0J1dHRvbi5zdmVsdGVcIjtcbiAgaW1wb3J0IENhdGVnb3J5TGlzdCBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9DYXRlZ29yeUxpc3QvQ2F0ZWdvcnlMaXN0LnN2ZWx0ZVwiO1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBwcmVsb2FkKHsgcGFyYW1zLCBxdWVyeSB9KSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goYHBvcnRmb2xpby5qc29uYClcbiAgICAgIC50aGVuKHIgPT4gci5qc29uKCkpXG4gICAgICAudGhlbihwb3N0cyA9PiB7XG4gICAgICAgIGNvbnN0IGlzTGFzdFBhZ2UgPSBwb3N0cy5sZW5ndGggPD0gUG9ydGZvbGlvU2V0dGluZ3MucG9zdHNQZXJQYWdlICogMTtcbiAgICAgICAgY29uc3QgcGFnZWRQb3N0cyA9IHBvc3RzLnNsaWNlKDAsIFBvcnRmb2xpb1NldHRpbmdzLnBvc3RzUGVyUGFnZSk7XG4gICAgICAgIHJldHVybiB7IGlzTGFzdFBhZ2UsIHBvc3RzOiBwYWdlZFBvc3RzIH07XG4gICAgICB9KTtcbiAgfVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG4gIGV4cG9ydCBsZXQgcG9zdHM7XG4gIGV4cG9ydCBsZXQgaXNMYXN0UGFnZTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gICNhd20tcG9ydGZvbGlvIHtcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xuICB9XG5cbiAgaDEge1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgZm9udC13ZWlnaHQ6IDIwMDtcbiAgICBmb250LXNpemU6IDQwcHg7XG4gIH1cblxuICAuYXdtLXBvcnRmb2xpby13cmFwcGVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi10b3A6IDUwcHg7XG4gIH1cblxuICAuYXdtLXBvcnRmb2xpby1ncmlkIHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmciAxZnI7XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnIgMWZyIDFmcjtcbiAgICBncmlkLWdhcDogMjBweDtcbiAgfVxuXG4gIC5hd20tcG9ydGZvbGlvLWZlYXR1cmVkLWltYWdlLXdyYXBwcGVyIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDI1MHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIGJvcmRlcjogc29saWQgMXB4IHZhcigtLWJvcmRlci1jb2xvcik7XG4gIH1cblxuICAuYXdtLXBvcnRmb2xpby1mZWF0dXJlZC1pbWFnZS13cmFwcHBlciBpbWcge1xuICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuXG4gIC5hd20tcG9ydGZvbGlvLWl0ZW0tdGl0bGUge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIH1cblxuICAuYXdtLXBvcnRmb2xpby1wYWdpbmcge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBtYXJnaW46IDIwcHggMDtcbiAgfVxuPC9zdHlsZT5cblxuLFxuPHN2ZWx0ZTpoZWFkPlxuICA8dGl0bGU+UG9ydGZvbGlvPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbjxzZWN0aW9uIGlkPVwiYXdtLXBvcnRmb2xpb1wiPlxuICA8aDE+UG9ydGZvbGlvPC9oMT5cbiAgPGRpdiBjbGFzcz1cImF3bS1wb3J0Zm9saW8td3JhcHBlclwiPlxuICAgIDxDYXRlZ29yeUxpc3QgY2F0ZWdvcmllcz17UG9ydGZvbGlvU2V0dGluZ3MuY2F0ZWdvcmllc30gLz5cbiAgICA8ZGl2IGNsYXNzPVwiYXdtLXBvcnRmb2xpby1ncmlkXCI+XG4gICAgICB7I2VhY2ggcG9zdHMgYXMgcG9zdH1cbiAgICAgICAgPCEtLSB3ZSdyZSB1c2luZyB0aGUgbm9uLXN0YW5kYXJkIGByZWw9cHJlZmV0Y2hgIGF0dHJpYnV0ZSB0b1xuXHRcdFx0XHR0ZWxsIFNhcHBlciB0byBsb2FkIHRoZSBkYXRhIGZvciB0aGUgcGFnZSBhcyBzb29uIGFzXG5cdFx0XHRcdHRoZSB1c2VyIGhvdmVycyBvdmVyIHRoZSBsaW5rIG9yIHRhcHMgaXQsIGluc3RlYWQgb2Zcblx0XHRcdFx0d2FpdGluZyBmb3IgdGhlICdjbGljaycgZXZlbnQgLS0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgeyNpZiBwb3N0LmZlYXR1cmVkSW1hZ2V9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYXdtLXBvcnRmb2xpby1mZWF0dXJlZC1pbWFnZS13cmFwcHBlclwiPlxuICAgICAgICAgICAgICA8YSByZWw9XCJwcmVmZXRjaFwiIGhyZWY9XCJwb3J0Zm9saW8ve3Bvc3QuY2F0ZWdvcnl9L3twb3N0LnNsdWd9XCI+XG5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBhbHQ9XCJ7cG9zdC50aXRsZX0gZmVhdHVyZWQgaW1hZ2VcIlxuICAgICAgICAgICAgICAgICAgc3JjPXtwb3N0LmZlYXR1cmVkSW1hZ2V9IC8+XG4gICAgICAgICAgICAgIDwvYT5cblxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgey9pZn1cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImF3bS1wb3J0Zm9saW8taXRlbS10aXRsZVwiPntwb3N0LnRpdGxlfTwvc3Bhbj5cblxuICAgICAgICA8L2Rpdj5cbiAgICAgIHsvZWFjaH1cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3NlY3Rpb24+XG48ZGl2IGNsYXNzPVwiYXdtLXBvcnRmb2xpby1wYWdpbmdcIj5cbiAgeyNpZiAhaXNMYXN0UGFnZX1cbiAgICA8QnV0dG9uIG9uOmNsaWNrPXsoKSA9PiAod2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL3BvcnRmb2xpby9wYWdlLzInKX0+XG4gICAgICBOZXh0IFBhZ2VcbiAgICA8L0J1dHRvbj5cbiAgey9pZn1cbjwvZGl2PlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3VEQTZGd0IsR0FBSSxJQUFDLEtBQUs7NkNBQ1gsR0FBSSxJQUFDLGFBQWE7Ozs7OERBSlEsR0FBSSxJQUFDLFFBQVEsa0JBQUcsR0FBSSxJQUFDLElBQUk7Ozs7Ozs7Ozs7O2dGQUdsRCxHQUFJLElBQUMsS0FBSzs7OztvRUFDWCxHQUFJLElBQUMsYUFBYTs7Ozt1RkFKUSxHQUFJLElBQUMsUUFBUSxrQkFBRyxHQUFJLElBQUMsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5QkFTeEIsR0FBSSxJQUFDLEtBQUs7Ozt5QkFYN0MsR0FBSSxJQUFDLGFBQWE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnQkFBbEIsR0FBSSxJQUFDLGFBQWE7Ozs7Ozs7Ozs7Ozs7Z0VBV2lCLEdBQUksSUFBQyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBbkI5QixpQkFBaUIsQ0FBQyxVQUFVOzs7OzRCQUU3QyxHQUFLOzs7O2dDQUFWLE1BQUk7Ozs7Z0NBeUJKLEdBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkJBekJMLEdBQUs7Ozs7K0JBQVYsTUFBSTs7Ozs7Ozs7Ozs7Ozs7OztvQ0FBSixNQUFJOzs7dUJBeUJKLEdBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQXRHQSxPQUFPLEdBQUcsTUFBTSxFQUFFLEtBQUs7UUFDOUIsSUFBSSxDQUFDLEtBQUssbUJBQ2QsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUNoQixJQUFJLENBQUMsS0FBSztRQUNILFVBQVUsR0FBRyxLQUFLLENBQUMsTUFBTSxJQUFJLGlCQUFpQixDQUFDLFlBQVksR0FBRyxDQUFDO1FBQy9ELFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxZQUFZO1dBQ3ZELFVBQVUsRUFBRSxLQUFLLEVBQUUsVUFBVTs7Ozs7T0FNakMsS0FBSztPQUNMLFVBQVU7Ozs7Ozs7Ozs2QkEwRk0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsbUJBQW1COzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
